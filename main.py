import telebot
import random
import re
from telebot import types
from conf import token
from request_queue_db import add_data_from_json_to_db, get_userid, session, add_user_in_tables, get_categories, get_id_categories, get_words_in_category, get_word_by_id, delete_all_words_in_category, delete_category, get_category_name, add_categories, add_word_to_category, delete_word_from_category
from EngAPI import Translate

button_state = {}
used_words = []
current_word_index = 0

add_data_from_json_to_db()

bot = telebot.TeleBot(token)
translate = Translate()


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    user = get_userid(user_id)
    if user:
        if not user.subs:
            user.subs = True
            session.commit()
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {user.nickname}üëã!"
                              f" –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–æ—Ç–∞."
                              f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–≥–Ω–∞–ª–∏!")
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        start_categories(message, user_id)
    else:
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã! –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
                              f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ."
                              f"–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n" 
                              f" –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô. \n –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        add_user_in_tables(message, user_id)
        start_categories(message, user_id)


def handle_subscribe(message, user_id):
    user = get_userid(user_id)
    if not user.subs:
        user.subs = True
        session.commit()
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {user.nickname}üëã! –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
                              f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ."
                              f"–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n" 
                              f" –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô. \n –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
        start_categories(message, user_id)
    else:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


@bot.message_handler(commands=['stop'])
def handle_stop(message, user_id=None):
    if not user_id:
        user_id = message.from_user.id
    user = get_userid(user_id)
    if user:
        user.subs = False
        session.commit()

        start_markup = types.InlineKeyboardMarkup(row_width=1)
        start_button = types.InlineKeyboardButton(text="‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", callback_data="start_b")
        start_markup.add(start_button)
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞.", reply_markup=start_markup)


@bot.message_handler(commands=['categories'])
def start_categories(message, user_id):
    user = get_userid(user_id)
    if user:
        categories = get_categories(user.id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        for category in categories:
            button = types.InlineKeyboardButton(text=category.name_ct, callback_data=f"category_{category.id}")
            markup.add(button)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_button = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è", callback_data="settings")
        markup.add(settings_button)

        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ chat_id —Å–æ–æ–±—â–µ–Ω–∏—è
    user = get_userid(user_id)
    if call.data.startswith('category_'):
        category_id = int(call.data.split('_')[1])
        category = get_id_categories(category_id)
        if category:
            words_in_category = get_words_in_category(category_id, user.id)
            if words_in_category:
                word_list = "\n".join([f"{i + 1}. {word.name_word}" for i, word in enumerate(words_in_category)])
                count = len(words_in_category)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                markup = create_buttons(category_id, count)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name_ct} ({count} —Å–ª–æ–≤):\n{word_list}",
                                      reply_markup=markup)

            else:
                markup = create_buttons(category_id, count=0)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name_ct} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        bot.answer_callback_query(call.id)

    elif call.data.startswith('add_word_'):
        category_id = int(call.data.split('_')[-1])
        category = get_id_categories(category_id)
        user_id = call.message.chat.id
        user = get_userid(user_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id,
                         f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name_ct}:")
        bot.register_next_step_handler(call.message,
                                       lambda message: process_add_word(message, category_id, user.id, category))

    elif call.data.startswith('rm_word_'):
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        category_id = int(call.data.split('_')[-1])
        words = get_words_in_category(category_id, user.id)
        delete_markup = types.InlineKeyboardMarkup(row_width=1)

        for word in words:
            button = types.InlineKeyboardButton(text=f"‚ùå{word.name_word}",
                                                callback_data=f"rm_word_bt_{word.id}_{category_id}")
            delete_markup.add(button)

        back_button = types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories")
        delete_markup.add(back_button)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_markup)

        if call.data.startswith('rm_word_bt_'):
            data_parts = call.data.split('_')
            word_id = int(data_parts[3])
            category_id = int(data_parts[4])

            if delete_word_from_category(word_id, category_id, user.id):
                bot.send_message(call.message.chat.id, f"–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                words_in_category = get_words_in_category(category_id, user.id)
                word_list = "\n".join([f"{i + 1}. {word.name_word}" for i, word in enumerate(words_in_category)])
                count = len(words_in_category)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                markup = create_buttons(category_id, count)
                bot.send_message(call.message.chat.id, f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({count} —Å–ª–æ–≤):\n{word_list}",
                                 reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    elif call.data.startswith('continue_learning_'):
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        category_id = int(call.data.split('_')[-1])
        category = get_id_categories(category_id)
        words_in_category = get_words_in_category(category_id, user.id)

        chosen_word = get_unique_word(words_in_category)
        translated_result = translate.show_text(chosen_word.name_word)
        ask_question(call, chosen_word, translated_result, words_in_category, category_id)


    elif call.data.startswith('check_answer_'):
        user_answer = call.data.split('_')[2]
        chosen_word = int(call.data.split('_')[3])
        category_id = int(call.data.split('_')[4])
        category = get_id_categories(category_id)
        words_in_category = get_words_in_category(category_id, user.id)
        word_to_check = get_word_by_id(chosen_word)

        if translate.check_answer(word_to_check, user_answer):
            bot.send_message(call.message.chat.id, text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æüí°! \n{word_to_check} -> {user_answer}")

            chosen_word = get_unique_word(words_in_category)
            translated_result = translate.show_text(chosen_word.name_word)

            ask_question(call, chosen_word, translated_result, words_in_category, category_id)

        else:
            bot.send_message(call.message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif call.data.startswith('delete_all_words_'):
        category_id = int(call.data.split('_')[-1])
        category = get_id_categories(category_id)
        success = delete_all_words_in_category(user.id, category_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        if success:
            bot.send_message(user_id, f"–í—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            markup = create_buttons(category_id, count=0)
            bot.send_message(call.message.chat.id, f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name_ct} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                             reply_markup=markup)
        else:
            bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    elif call.data == 'settings':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        settings_markup = create_settings_markup()
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{txt_all_category(user)}",
                         reply_markup=settings_markup)

    elif call.data == 'back_to_categories':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start_categories(call.message, user_id)

    elif call.data == 'add_category':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        button_state[call.message.chat.id] = 'add_category'

    elif call.data == 'delete_category':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        categories = get_categories(user.id)
        delete_markup = types.InlineKeyboardMarkup(row_width=1)
        for category in categories:
            button = types.InlineKeyboardButton(text=f"‚ùå{category.name_ct}",
                                                callback_data=f"delete_{category.id}")
            delete_markup.add(button)

        back_button = types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories")
        delete_markup.add(back_button)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_markup)
        delete_category_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ùå", callback_data="delete_category")
        delete_markup.add(delete_category_button)

    elif call.data.startswith('delete_'):
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        category_id = int(call.data.split('_')[1])
        delete_category(user.id, category_id)
        category_name = get_category_name(category_id)
        bot.send_message(call.message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        settings_markup = create_settings_markup()
        bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{txt_all_category(user)}",
                         reply_markup=settings_markup)

    elif call.data == 'stop_b':
        handle_stop(call.message, user_id)

    elif call.data == 'start_b':
        handle_subscribe(call.message, user_id)


def get_unique_word(words_in_category):
    unique_word = random.choice(words_in_category)
    while unique_word.id in used_words:
        unique_word = random.choice(words_in_category)
    used_words.append(unique_word.id)
    return unique_word


def continue_learning(chosen_word, translated_result, words_in_category):
    correct_answer = translated_result['destination_text']

    wrong_answers = [translate.show_text(word.name_word).get('destination_text') for word in words_in_category if
                     word != chosen_word]
    answers = [correct_answer] + random.sample(wrong_answers, 3)

    return answers


def ask_question(call, chosen_word, translated_result, words_in_category, category_id):
    answers = continue_learning(chosen_word, translated_result, words_in_category)
    random.shuffle(answers)
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    for answer in answers:
        keyboard.add(types.InlineKeyboardButton(answer,
                                                callback_data=f'check_answer_{answer.lower()}_{chosen_word.id}_{category_id}'))

    keyboard.add(types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories"))
    bot.send_message(call.message.chat.id,
                     text=f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ üá∑üá∫ {translated_result['source_text']} –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫?",
                     reply_markup=keyboard)

    global current_word_index
    current_word_index += 1

    keyboard1 = types.InlineKeyboardMarkup(row_width=1)

    if current_word_index == len(words_in_category):
        keyboard1.add(types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories"))
        bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", reply_markup=keyboard1)


def create_settings_markup():
    settings_markup = types.InlineKeyboardMarkup(row_width=2)
    add_category_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ûï", callback_data=f"add_category")
    settings_markup.add(add_category_button)
    delete_category_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ùå", callback_data=f"delete_category")
    settings_markup.add(delete_category_button)
    back_button = types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories")
    settings_markup.add(back_button)
    stop_button = types.InlineKeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è‚ùå", callback_data="stop_b")
    settings_markup.add(stop_button)

    return settings_markup


def create_buttons(category_id, count):
    add_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï", callback_data=f"add_word_{category_id}")
    remove_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ‚ùå", callback_data=f"rm_word_{category_id}")
    delete_all_words_button = types.InlineKeyboardButton(text="‚ùå–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚ùå",
                                                         callback_data=f"delete_all_words_{category_id}")
    back_button = types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ºüîô", callback_data="back_to_categories")

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(add_button, remove_button)
    markup.add(delete_all_words_button)
    if count >= 4:
        continue_button = types.InlineKeyboardButton(text="–ö –∏–∑—É—á–µ–Ω–∏—é ‚û°",
                                                     callback_data=f"continue_learning_{category_id}")
        markup.add(continue_button)
    markup.add(back_button)

    return markup


@bot.message_handler(
    func=lambda message: message.chat.id in button_state and button_state[message.chat.id] == 'add_category')
def handle_new_category(message):
    user_id = message.from_user.id
    user = get_userid(user_id)

    add_category = message.text

    if not is_russian_word(add_category):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
        settings_markup = create_settings_markup()
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{txt_all_category(user)}", reply_markup=settings_markup)
        return

    if has_duplicate_word(get_categories(user.id), add_category):
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{add_category}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        settings_markup = create_settings_markup()
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{txt_all_category(user)}", reply_markup=settings_markup)
        return

    add_categories(user.id, add_category)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{add_category}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    del button_state[message.chat.id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    settings_markup = create_settings_markup()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{txt_all_category(user)}", reply_markup=settings_markup)


def txt_all_category(user):
    categories = get_categories(user.id)
    message_text = "\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
    count = 1
    for category in categories:
        message_text += f"{count}.{category.name_ct}\n"
        count += 1

    return message_text


def process_add_word(message, category_id, user_id, category):
    words = message.text.split(",")  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∑–∞–ø—è—Ç–æ–π
    for word in words:
        word = word.strip()
        if not is_russian_word(word):
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤")
            continue
        if is_word_unique(word, category_id, user_id):
            success = add_word_to_category(word.strip(), category_id, user_id)
            if success:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word.strip()}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

            else:
                bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        else:
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    words_in_category = get_words_in_category(category_id, user_id)
    word_list = "\n".join([f"{i + 1}. {word.name_word}" for i, word in enumerate(words_in_category)])
    count = len(words_in_category)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    markup = create_buttons(category_id, count)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name_ct} ({count} —Å–ª–æ–≤):\n{word_list}",
                     reply_markup=markup)


def is_russian_word(word):
    return bool(re.match(r'^[–ê-–Ø–Å–∞-—è—ë]', word))


def is_word_unique(word, category_id, user_id):
    existing_words = get_words_in_category(category_id, user_id)
    return all(existing_word.name_word.lower() != word.lower() for existing_word in existing_words)


def has_duplicate_word(words_list, new_word):
    return new_word.lower() in [word.name_ct.lower() for word in words_list]


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤

# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç
bot.polling()
session.close()
